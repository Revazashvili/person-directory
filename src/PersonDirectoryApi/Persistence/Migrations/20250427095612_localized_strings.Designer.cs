// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PersonDirectoryApi.Persistence;

#nullable disable

namespace PersonDirectoryApi.Persistence.Migrations
{
    [DbContext(typeof(PersonContext))]
    [Migration("20250427095612_localized_strings")]
    partial class localized_strings
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PersonDirectoryApi.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_cities");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_cities_name");

                    b.ToTable("cities", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Tbilisi"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Batumi"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Kutaisi"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Rustavi"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Zugdidi"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Gori"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Poti"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Telavi"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Samtredia"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Khashuri"
                        });
                });

            modelBuilder.Entity("PersonDirectoryApi.Entities.Person", b =>
                {
                    b.Property<string>("PersonalNumber")
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)")
                        .HasColumnName("personal_number");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("date")
                        .HasColumnName("birth_date");

                    b.Property<int>("CityId")
                        .HasColumnType("integer")
                        .HasColumnName("city_id");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("first_name");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("gender");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("image_url");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("last_name");

                    b.HasKey("PersonalNumber")
                        .HasName("pk_people");

                    b.HasIndex("BirthDate")
                        .HasDatabaseName("ix_people_birth_date");

                    b.HasIndex("CityId")
                        .HasDatabaseName("ix_people_city_id");

                    b.HasIndex("FirstName", "LastName")
                        .HasDatabaseName("ix_people_first_name_last_name");

                    b.ToTable("people", (string)null);
                });

            modelBuilder.Entity("PersonDirectoryApi.Entities.PersonRelationship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("PersonPersonalNumber")
                        .IsRequired()
                        .HasColumnType("character varying(11)")
                        .HasColumnName("person_personal_number");

                    b.Property<string>("RelatedPersonPersonalNumber")
                        .IsRequired()
                        .HasColumnType("character varying(11)")
                        .HasColumnName("related_person_personal_number");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_person_relationships");

                    b.HasIndex("RelatedPersonPersonalNumber")
                        .HasDatabaseName("ix_person_relationships_related_person_personal_number");

                    b.HasIndex("PersonPersonalNumber", "RelatedPersonPersonalNumber", "Type")
                        .IsUnique()
                        .HasDatabaseName("ix_person_relationships_person_personal_number_related_person_");

                    b.ToTable("person_relationships", (string)null);
                });

            modelBuilder.Entity("PersonDirectoryApi.Entities.PhoneNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("number");

                    b.Property<string>("PersonPersonalNumber")
                        .IsRequired()
                        .HasColumnType("character varying(11)")
                        .HasColumnName("person_personal_number");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_phone_numbers");

                    b.HasIndex("PersonPersonalNumber")
                        .HasDatabaseName("ix_phone_numbers_person_personal_number");

                    b.ToTable("phone_numbers", (string)null);
                });

            modelBuilder.Entity("PersonDirectoryApi.Localization.LocalizedString", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("text")
                        .HasColumnName("key");

                    b.Property<string>("Culture")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("culture");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("value");

                    b.HasKey("Key", "Culture")
                        .HasName("pk_localizations");

                    b.HasIndex("Key", "Culture")
                        .IsUnique()
                        .HasDatabaseName("ix_localizations_key_culture");

                    b.ToTable("localizations", (string)null);

                    b.HasData(
                        new
                        {
                            Key = "field_required",
                            Culture = "ka",
                            Value = "ველი სავალდებულოა"
                        },
                        new
                        {
                            Key = "field_required",
                            Culture = "en",
                            Value = "field is required"
                        },
                        new
                        {
                            Key = "field_greater_than_0",
                            Culture = "ka",
                            Value = "ველი უნდა იყოს 0-ზე მეტი"
                        },
                        new
                        {
                            Key = "field_greater_than_0",
                            Culture = "en",
                            Value = "field must be greater than 0"
                        },
                        new
                        {
                            Key = "at_least_18_years_old_restriction",
                            Culture = "en",
                            Value = "Person should be at least 18 years old"
                        },
                        new
                        {
                            Key = "at_least_18_years_old_restriction",
                            Culture = "ka",
                            Value = "მომხმარებელი უნდა იყოს მინიმუმ 18 წლის"
                        },
                        new
                        {
                            Key = "city_does_not_exists",
                            Culture = "en",
                            Value = "City does not exists"
                        },
                        new
                        {
                            Key = "city_does_not_exists",
                            Culture = "ka",
                            Value = "ქალაქი არ მოიძებნა"
                        },
                        new
                        {
                            Key = "person_does_not_exists",
                            Culture = "en",
                            Value = "Person does not exists"
                        },
                        new
                        {
                            Key = "person_does_not_exists",
                            Culture = "ka",
                            Value = "მომხმარებელი არ მოიძებნა"
                        },
                        new
                        {
                            Key = "personal_number_already_exists",
                            Culture = "en",
                            Value = "Person with this personal number already exists"
                        },
                        new
                        {
                            Key = "personal_number_already_exists",
                            Culture = "ka",
                            Value = "პირადი ნომრით ჩანაწერი უკვე არსებობს"
                        },
                        new
                        {
                            Key = "phone_number_already_exists",
                            Culture = "en",
                            Value = "Person with this phone number already exists"
                        },
                        new
                        {
                            Key = "phone_number_already_exists",
                            Culture = "ka",
                            Value = "მობილურის ნომრით ჩანაწერი უკვე არსებობს"
                        },
                        new
                        {
                            Key = "name_lenght_between_2_and_50",
                            Culture = "en",
                            Value = "Length should be between 2 and 50"
                        },
                        new
                        {
                            Key = "name_lenght_between_2_and_50",
                            Culture = "ka",
                            Value = "სიმბოლოების რამდენობა უნდა იყოს 2-სა ანდ 50-ს შორის"
                        },
                        new
                        {
                            Key = "invalid_format",
                            Culture = "en",
                            Value = "Format is invalid"
                        },
                        new
                        {
                            Key = "invalid_format",
                            Culture = "ka",
                            Value = "ფორმატი არავალიდურია"
                        },
                        new
                        {
                            Key = "relationship_already_exists",
                            Culture = "en",
                            Value = "Relationship already exists"
                        },
                        new
                        {
                            Key = "relationship_already_exists",
                            Culture = "ka",
                            Value = "კავშირი უკვე არსებობს"
                        });
                });

            modelBuilder.Entity("PersonDirectoryApi.Entities.Person", b =>
                {
                    b.HasOne("PersonDirectoryApi.Entities.City", "City")
                        .WithMany("Residents")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_people_cities_city_id");

                    b.Navigation("City");
                });

            modelBuilder.Entity("PersonDirectoryApi.Entities.PersonRelationship", b =>
                {
                    b.HasOne("PersonDirectoryApi.Entities.Person", "Person")
                        .WithMany("Relationships")
                        .HasForeignKey("PersonPersonalNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_person_relationships_people_person_personal_number");

                    b.HasOne("PersonDirectoryApi.Entities.Person", "RelatedPerson")
                        .WithMany()
                        .HasForeignKey("RelatedPersonPersonalNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_person_relationships_people_related_person_personal_number");

                    b.Navigation("Person");

                    b.Navigation("RelatedPerson");
                });

            modelBuilder.Entity("PersonDirectoryApi.Entities.PhoneNumber", b =>
                {
                    b.HasOne("PersonDirectoryApi.Entities.Person", "Person")
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("PersonPersonalNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_phone_numbers_persons_person_personal_number");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("PersonDirectoryApi.Entities.City", b =>
                {
                    b.Navigation("Residents");
                });

            modelBuilder.Entity("PersonDirectoryApi.Entities.Person", b =>
                {
                    b.Navigation("PhoneNumbers");

                    b.Navigation("Relationships");
                });
#pragma warning restore 612, 618
        }
    }
}
